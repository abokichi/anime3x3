<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive 3x3 Photo Grid</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #6c5ce7;
            --secondary-color: #a29bfe;
            --accent-color: #fd79a8;
            --background-color: #1a1a2e;
            --card-color: #16213e;
            --text-color: #e6e6e6;
            --border-color: #2d4059;
            --border-radius: 10px;
            --box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            margin: 0;
            padding: 30px;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
        }

        h1 {
            color: var(--secondary-color);
            margin-bottom: 30px;
            font-weight: 600;
            text-align: center;
        }

        .grid-container {
            display: grid;
            grid-template-columns: repeat(3, 200px);
            grid-template-rows: repeat(3, 200px);
            gap: 15px;
            margin-bottom: 40px;
        }

        .grid-item {
            width: 200px;
            height: 200px;
            background-color: var(--card-color);
            border-radius: var(--border-radius);
            overflow: hidden;
            position: relative;
            box-shadow: var(--box-shadow);
            transition: var(--transition);
            border: 1px solid var(--border-color);
        }

        .grid-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.4);
        }

        .grid-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            position: absolute;
            top: 0;
            left: 0;
        }

        .static-image {
            z-index: 1;
        }

        .gif-image {
            z-index: 2;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .grid-item:hover .gif-image {
            opacity: 1;
        }

        .controls {
            background-color: var(--card-color);
            padding: 30px;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            width: 100%;
            max-width: 800px;
            margin-top: 20px;
            border: 1px solid var(--border-color);
        }

        .control-group {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 20px;
        }

        .control-item {
            background-color: rgba(28, 37, 65, 0.5);
            padding: 20px;
            border-radius: var(--border-radius);
            text-align: center;
            border: 1px solid var(--border-color);
            transition: var(--transition);
        }

        .control-item:hover {
            background-color: rgba(44, 58, 102, 0.5);
        }

        .control-item h3 {
            margin-top: 0;
            margin-bottom: 15px;
            color: var(--secondary-color);
            font-size: 16px;
            font-weight: 500;
        }

        .upload-btn-container {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 15px;
        }

        .upload-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 16px;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .upload-btn:hover {
            background-color: var(--accent-color);
            transform: scale(1.1);
        }

        .upload-btn::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: -40px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #333;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
            opacity: 0;
            visibility: hidden;
            transition: var(--transition);
            white-space: nowrap;
            z-index: 10;
        }

        .upload-btn:hover::after {
            opacity: 1;
            visibility: visible;
            bottom: -35px;
        }

        .file-info {
            font-size: 12px;
            color: #b8b8b8;
            margin-top: 5px;
            word-break: break-all;
            padding: 8px;
            background-color: rgba(0, 0, 0, 0.2);
            border-radius: 5px;
            display: none;
        }

        .file-info.active {
            display: block;
        }

        .section-title {
            color: var(--secondary-color);
            margin-bottom: 25px;
            text-align: center;
            font-size: 1.5rem;
            font-weight: 500;
        }

        .grid-coordinates {
            position: absolute;
            bottom: 5px;
            right: 5px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 3px 8px;
            border-radius: 3px;
            font-size: 10px;
            z-index: 3;
            font-family: monospace;
        }

        input[type="file"] {
            display: none;
        }

        .audio-controls {
            margin-top: 10px;
        }

        .time-input {
            width: 100%;
            background-color: rgba(0, 0, 0, 0.2);
            border: 1px solid var(--border-color);
            color: var(--text-color);
            padding: 5px;
            border-radius: 4px;
            margin-top: 5px;
            text-align: center;
        }

        .time-input:focus {
            outline: none;
            border-color: var(--accent-color);
        }

        .time-label {
            font-size: 12px;
            color: var(--secondary-color);
            display: block;
            margin-bottom: 3px;
        }

        /* Modern scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: var(--card-color);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--primary-color);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--accent-color);
        }
    </style>
</head>
<body>
    <h1>Interactive 3x3 Photo Grid</h1>
    
    <div class="grid-container" id="photoGrid">
        <!-- Grid items will be generated by JavaScript -->
    </div>
    
    <div class="controls">
        <h2 class="section-title">Customize Your Grid</h2>
        <div class="control-group" id="controlGroup">
            <!-- Control items will be generated by JavaScript -->
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const gridContainer = document.getElementById('photoGrid');
            const controlGroup = document.getElementById('controlGroup');
            
            // Create 3x3 grid and controls
            for (let row = 0; row < 3; row++) {
                for (let col = 0; col < 3; col++) {
                    const position = row * 3 + col + 1;
                    const coordinates = `${row+1},${col+1}`;
                    
                    // Create grid item
                    const gridItem = document.createElement('div');
                    gridItem.className = 'grid-item';
                    gridItem.dataset.position = position;
                    
                    // Create static image container (initially empty)
                    const staticImg = document.createElement('img');
                    staticImg.className = 'static-image';
                    staticImg.alt = `Tile ${coordinates}`;
                    
                    // Create GIF container (hidden by default)
                    const gifImg = document.createElement('img');
                    gifImg.className = 'gif-image';
                    gifImg.alt = `GIF ${coordinates}`;
                    
                    // Create audio element
                    const audio = document.createElement('audio');
                    audio.className = 'grid-audio';
                    
                    // Create coordinates label (hidden until hover if you want to show it later)
                    const coords = document.createElement('div');
                    coords.className = 'grid-coordinates';
                    coords.textContent = coordinates;
                    coords.style.display = 'none'; // Hidden by default
                    
                    // Append elements to grid item
                    gridItem.appendChild(staticImg);
                    gridItem.appendChild(gifImg);
                    gridItem.appendChild(audio);
                    gridItem.appendChild(coords);
                    
                    // Add hover events
                    gridItem.addEventListener('mouseenter', function() {
                        // Reset and play GIF
                        if (gifImg.src) {
                            gifImg.src = gifImg.src;
                        }
                        
                        // Reset and play audio
                        if (audio.src) {
                            const startTime = parseFloat(audio.dataset.startTime) || 0;
                            audio.currentTime = startTime;
                            audio.play().catch(e => console.log('Audio play failed:', e));
                        }
                    });
                    
                    // Stop audio when mouse leaves
                    gridItem.addEventListener('mouseleave', function() {
                        if (audio.src) {
                            audio.pause();
                        }
                    });
                    
                    gridContainer.appendChild(gridItem);
                    
                    // Create control item
                    const controlItem = document.createElement('div');
                    controlItem.className = 'control-item';
                    
                    const controlTitle = document.createElement('h3');
                    controlTitle.textContent = `Tile ${coordinates}`;
                    
                    // Create button container
                    const btnContainer = document.createElement('div');
                    btnContainer.className = 'upload-btn-container';
                    
                    // Static image upload
                    const staticInput = createFileInput('image/png, image/jpeg', function(e) {
                        if (e.target.files[0]) {
                            const file = e.target.files[0];
                            staticImg.src = URL.createObjectURL(file);
                            updateFileInfo(staticInfo, file.name);
                        }
                    });
                    const staticBtn = createIconButton('fa-image', 'Upload static image (PNG/JPG)');
                    staticBtn.appendChild(staticInput);
                    
                    // GIF upload
                    const gifInput = createFileInput('image/gif', function(e) {
                        if (e.target.files[0]) {
                            const file = e.target.files[0];
                            gifImg.src = URL.createObjectURL(file);
                            updateFileInfo(gifInfo, file.name);
                        }
                    });
                    const gifBtn = createIconButton('fa-film', 'Upload animated GIF');
                    gifBtn.appendChild(gifInput);
                    
                    // Audio upload
                    const audioInput = createFileInput('audio/mp3', function(e) {
                        if (e.target.files[0]) {
                            const file = e.target.files[0];
                            audio.src = URL.createObjectURL(file);
                            updateFileInfo(audioInfo, file.name);
                            
                            // When metadata is loaded, update duration display
                            audio.addEventListener('loadedmetadata', function() {
                                durationDisplay.textContent = formatTime(audio.duration);
                                startTimeInput.max = Math.floor(audio.duration);
                            });
                        }
                    });
                    const audioBtn = createIconButton('fa-music', 'Upload audio (MP3)');
                    audioBtn.appendChild(audioInput);
                    
                    // Append buttons
                    btnContainer.appendChild(staticBtn);
                    btnContainer.appendChild(gifBtn);
                    btnContainer.appendChild(audioBtn);
                    
                    // Create file info displays
                    const staticInfo = createFileInfo();
                    const gifInfo = createFileInfo();
                    const audioInfo = createFileInfo();
                    
                    // Create audio controls
                    const audioControls = document.createElement('div');
                    audioControls.className = 'audio-controls';
                    
                    const startTimeLabel = document.createElement('label');
                    startTimeLabel.className = 'time-label';
                    startTimeLabel.textContent = 'Start Time (seconds)';
                    
                    const startTimeInput = document.createElement('input');
                    startTimeInput.type = 'number';
                    startTimeInput.className = 'time-input';
                    startTimeInput.min = '0';
                    startTimeInput.step = '0.1';
                    startTimeInput.value = '0';
                    startTimeInput.addEventListener('input', function() {
                        audio.dataset.startTime = this.value;
                    });
                    
                    const durationLabel = document.createElement('div');
                    durationLabel.className = 'time-label';
                    durationLabel.textContent = 'Duration: ';
                    
                    const durationDisplay = document.createElement('span');
                    durationDisplay.textContent = '0:00';
                    durationLabel.appendChild(durationDisplay);
                    
                    audioControls.appendChild(startTimeLabel);
                    audioControls.appendChild(startTimeInput);
                    audioControls.appendChild(durationLabel);
                    
                    // Append all elements to control item
                    controlItem.appendChild(controlTitle);
                    controlItem.appendChild(btnContainer);
                    controlItem.appendChild(staticInfo);
                    controlItem.appendChild(gifInfo);
                    controlItem.appendChild(audioInfo);
                    controlItem.appendChild(audioControls);
                    
                    controlGroup.appendChild(controlItem);
                }
            }
            
            function createFileInput(accept, onChangeHandler) {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = accept;
                input.addEventListener('change', onChangeHandler);
                return input;
            }
            
            function createIconButton(iconClass, tooltip) {
                const button = document.createElement('label');
                button.className = 'upload-btn';
                button.setAttribute('data-tooltip', tooltip);
                
                const icon = document.createElement('i');
                icon.className = `fas ${iconClass}`;
                
                button.appendChild(icon);
                return button;
            }
            
            function createFileInfo() {
                const info = document.createElement('div');
                info.className = 'file-info';
                return info;
            }
            
            function updateFileInfo(element, fileName) {
                if (fileName) {
                    element.textContent = fileName.length > 20 ? 
                        fileName.substring(0, 17) + '...' : fileName;
                    element.classList.add('active');
                } else {
                    element.classList.remove('active');
                }
            }
            
            function formatTime(seconds) {
                const mins = Math.floor(seconds / 60);
                const secs = Math.floor(seconds % 60);
                return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
            }
        });
    </script>
</body>
</html>
